
#confirm add, delete, update
Confirm = True

import json
from browser import document as doc, bind, ajax, html, confirm, window

#POST api urls
urllist = '/auth/groups/list'
urlupdate = '/auth/groups/update'
urladd = '/auth/groups/add'
urldelete = '/auth/groups/delete'

callback_delete = None
callback_add = None
callback_update = None

def ajaxPOST(url, callback_func, data):
	doc['msgloader'].text = 'Loading ... '
	doc['divloader'].hidden = False
	doc['groupstable'].hidden = True
	req = ajax.ajax()
	req.bind('complete',callback_func)
	req.set_timeout(10, timeout_func) #in seconds
	req.open('POST',url,True)
	req.set_header('content-type','application/x-www-form-urlencoded')
	req.send(data)

def timeout_func():
	doc['msgloader'].text += 'AJAX Timeout!'

def on_complete_list(req):
	if req.status == 200 or req.status == 0:
		groupstable = doc['groupstable']
		groupstable.clear()
		thead = html.THEAD()
		thead <= html.TR(html.TH(x) for x in ('#','Name','Description',''))
		groupstable <= thead
		groupstable <= html.TBODY()
		t = groupstable.tBodies[0]
		try:
			D = json.loads(req.text)
		except Exception as ex:
			#Error/Exception from server side
			if req.text:
				doc['msgloader'].text += ' {}'.format(req.text)
			else:
				doc['msgloader'].text += ' Json error:\n{}'.format(ex)
			return
		if not D['ok']:
			doc['msgloader'].text += ' {}'.format(D['data'])
		else:
			#show table
			doc['divloader'].hidden = True
			doc['groupstable'].hidden = False
			#enable buttons
			doc['addbtn'].disabled = False
			doc['filterbtn'].disabled = False
			doc['refreshbtn'].disabled = False
			L = D['data']
			for ix,i in enumerate(L):
				row = html.TR()
				row <= (html.TD(ix+1))
				row <= (html.TD(i.get('name')))
				row <= (html.TD(i.get('description')))
				_id_ = i.get('id')
				#Let all try to edit or delete
				row <= html.TD(mk_button('Edit',_id_,'btn-success','Edit "{}"'.format(i.get('name')))+' '+mk_button('Delete',_id_,'btn-danger','Delete "{}"'.format(i.get('name'))),nowrap='')
				t <= row

def on_complete_add_update_delete(req):
	if req.status == 200 or req.status == 0:
		try:
			D = json.loads(req.text)
			if not D['ok']:
				#Error/Exception from server side
				doc['msgloader'].text += ' {}'.format(D['data'])
				return
		except Exception as ex:
			#Error/Exception from server side
			if req.text:
				doc['msgloader'].text += ' {}'.format(req.text)
			else:
				doc['msgloader'].text += 'Json error:\n{}'.format(ex)
			return
		show()

def btn_click(evt):
	action = evt.target.text
	# table row of the clicked button
	row = evt.target.parent.parent
	_id_ = evt.target._id_
	cells = row.get(selector="TD")
	if action == "Edit":
		# Replace editable cells by INPUT fields
		for cell in cells[1:-1]:
			value = cell.text
			cell.clear()
			cell <= html.INPUT(value=value)
		# Replace buttons "Edit" and "Delete" by button "Update"
		cells[-1].clear()
		cells[-1] <= mk_button('Update',_id_,'btn-success') + ' ' + mk_button('Cancel',_id_,'btn-warning')
	if action == "Add":
		values = [entry.value for entry in row.select("INPUT")]
		def _add():
			ajaxPOST(urladd, on_complete_add_update_delete, {'data': json.dumps(values)})
		global callback_add
		callback_add = _add
		message = 'Add group "{}" ?'.format(values[0])
		window.show_dlg('Confirm add group', message)
	if action == "Update":
		values = [entry.value for entry in row.select("INPUT")]
		def _update():
			ajaxPOST(urlupdate, on_complete_add_update_delete, {'data': json.dumps(values), 'id':_id_})
		global callback_update
		callback_update = _update
		message = 'Update group "{}" ?'.format(values[0])
		window.show_dlg('Confirm update group', message)
	if action == "Delete":
		def _delete():
			ajaxPOST(urldelete, on_complete_add_update_delete, {'id':_id_})
		global callback_delete
		callback_delete = _delete
		message = 'Delete group "{}" ?'.format(cells[1].text)
		window.show_dlg('Confirm delete group', message)
	if action == "Cancel":
		show()

@bind(doc['btnconfirmok'], 'click')
def on_btnconfirmok_click(evt):
	window.hide_dlg()
	global callback_delete
	global callback_add
	global callback_update
	if callback_delete:
		callback_delete()
	if callback_add:
		callback_add()
	if callback_update:
		callback_update()
	callback_delete = None
	callback_add = None
	callback_update = None

@bind(doc['btnconfirmcancel'], 'click')
def on_btnconfirmcancel_click(evt):
	window.hide_dlg()
	global callback_delete
	global callback_add
	global callback_update
	callback_delete = None
	callback_add = None
	callback_update = None

def update_select(evt):
	evt.target.value = evt.target.checked and 'yes' or 'no'

def mk_button(label, _id_, cls='btn-default', title=''):
	btn = html.BUTTON(label, title=title)
	btn.classList = 'btn btn-xs '+cls
	btn._id_ = _id_
	btn.bind('click', btn_click)
	return btn

@bind(doc['addbtn'], 'click')
def add_func(evt):
	#evt.target.parent.parent
	_id_ = 0
	t = doc['groupstable'].tBodies[0]
	row = html.TR()
	row <= (html.TD('0')) #
	_ = html.TD(''); _ <= html.INPUT(value='- new group -', style={'color':'#FF0000'}); row <= _
	_ = html.TD(''); _ <= html.INPUT(value='- new description -', style={'color':'#FF0000'}); row <= _
	row <= html.TD(mk_button('Add',_id_,'btn-success') + ' ' + mk_button('Cancel',_id_,'btn-warning'),nowrap='')
	t <= row

@bind(doc['filterbtn'], 'click')
def filter_func(evt):
	filter = doc['filter'].value
	ajaxPOST(urllist, on_complete_list, {'filter':filter})

@bind(doc['refreshbtn'], 'click')
def show_all():
	doc['filter'].value = ''
	show()

def show():
	doc['addbtn'].disabled = True
	doc['filterbtn'].disabled = True
	doc['refreshbtn'].disabled = True
	filter = doc['filter'].value
	ajaxPOST(urllist, on_complete_list, {'filter':filter})

show()
